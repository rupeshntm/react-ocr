{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/rupeshchavan/Desktop/react-ocr/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/rupeshchavan/Desktop/react-ocr/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar resolveURL = require('resolve-url');\n\nvar blueimpLoadImage = require('blueimp-load-image');\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\n\n\nvar readFromBlobOrFile = function readFromBlobOrFile(blob) {\n  return new Promise(function (resolve, reject) {\n    var fileReader = new FileReader();\n\n    fileReader.onload = function () {\n      resolve(fileReader.result);\n    };\n\n    fileReader.onerror = function (_ref) {\n      var code = _ref.target.error.code;\n      reject(Error(\"File could not be read! Code=\".concat(code)));\n    };\n\n    fileReader.readAsArrayBuffer(blob);\n  });\n};\n\nvar fixOrientationFromUrlOrBlobOrFile = function fixOrientationFromUrlOrBlobOrFile(blob) {\n  return new Promise(function (resolve) {\n    blueimpLoadImage(blob, function (img) {\n      return img.toBlob(resolve);\n    }, {\n      orientation: true,\n      canvas: true\n    });\n  });\n};\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\n\n\nvar loadImage = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(image) {\n    var data, resp, img, _img;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            data = image;\n\n            if (!(typeof image === 'undefined')) {\n              _context2.next = 3;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", 'undefined');\n\n          case 3:\n            if (!(typeof image === 'string')) {\n              _context2.next = 24;\n              break;\n            }\n\n            if (!image.endsWith('.pbm')) {\n              _context2.next = 13;\n              break;\n            }\n\n            _context2.next = 7;\n            return fetch(resolveURL(image));\n\n          case 7:\n            resp = _context2.sent;\n            _context2.next = 10;\n            return resp.arrayBuffer();\n\n          case 10:\n            data = _context2.sent;\n            _context2.next = 22;\n            break;\n\n          case 13:\n            img = image; // If not Base64 Image\n\n            if (!/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n              img = resolveURL(image);\n            }\n\n            _context2.t0 = readFromBlobOrFile;\n            _context2.next = 18;\n            return fixOrientationFromUrlOrBlobOrFile(img);\n\n          case 18:\n            _context2.t1 = _context2.sent;\n            _context2.next = 21;\n            return (0, _context2.t0)(_context2.t1);\n\n          case 21:\n            data = _context2.sent;\n\n          case 22:\n            _context2.next = 47;\n            break;\n\n          case 24:\n            if (!(image instanceof HTMLElement)) {\n              _context2.next = 38;\n              break;\n            }\n\n            if (!(image.tagName === 'IMG')) {\n              _context2.next = 29;\n              break;\n            }\n\n            _context2.next = 28;\n            return loadImage(image.src);\n\n          case 28:\n            data = _context2.sent;\n\n          case 29:\n            if (!(image.tagName === 'VIDEO')) {\n              _context2.next = 33;\n              break;\n            }\n\n            _context2.next = 32;\n            return loadImage(image.poster);\n\n          case 32:\n            data = _context2.sent;\n\n          case 33:\n            if (!(image.tagName === 'CANVAS')) {\n              _context2.next = 36;\n              break;\n            }\n\n            _context2.next = 36;\n            return new Promise(function (resolve) {\n              image.toBlob( /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(blob) {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return readFromBlobOrFile(blob);\n\n                        case 2:\n                          data = _context.sent;\n                          resolve();\n\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function (_x2) {\n                  return _ref3.apply(this, arguments);\n                };\n              }());\n            });\n\n          case 36:\n            _context2.next = 47;\n            break;\n\n          case 38:\n            if (!(image instanceof File || image instanceof Blob)) {\n              _context2.next = 47;\n              break;\n            }\n\n            _img = image;\n\n            if (image.name.endsWith('.pbm')) {\n              _context2.next = 44;\n              break;\n            }\n\n            _context2.next = 43;\n            return fixOrientationFromUrlOrBlobOrFile(_img);\n\n          case 43:\n            _img = _context2.sent;\n\n          case 44:\n            _context2.next = 46;\n            return readFromBlobOrFile(_img);\n\n          case 46:\n            data = _context2.sent;\n\n          case 47:\n            return _context2.abrupt(\"return\", new Uint8Array(data));\n\n          case 48:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function loadImage(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nmodule.exports = loadImage;","map":{"version":3,"sources":["/Users/rupeshchavan/Desktop/react-ocr/node_modules/tesseract.js/src/worker/browser/loadImage.js"],"names":["resolveURL","require","blueimpLoadImage","readFromBlobOrFile","blob","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","code","target","error","Error","readAsArrayBuffer","fixOrientationFromUrlOrBlobOrFile","img","toBlob","orientation","canvas","loadImage","image","data","endsWith","fetch","resp","arrayBuffer","test","HTMLElement","tagName","src","poster","File","Blob","name","Uint8Array","module","exports"],"mappings":"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","sourcesContent":["const resolveURL = require('resolve-url');\nconst blueimpLoadImage = require('blueimp-load-image');\n\n/**\n * readFromBlobOrFile\n *\n * @name readFromBlobOrFile\n * @function\n * @access private\n */\nconst readFromBlobOrFile = (blob) => (\n  new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = () => {\n      resolve(fileReader.result);\n    };\n    fileReader.onerror = ({ target: { error: { code } } }) => {\n      reject(Error(`File could not be read! Code=${code}`));\n    };\n    fileReader.readAsArrayBuffer(blob);\n  })\n);\n\nconst fixOrientationFromUrlOrBlobOrFile = (blob) => (\n  new Promise((resolve) => {\n    blueimpLoadImage(\n      blob,\n      (img) => img.toBlob(resolve),\n      {\n        orientation: true,\n        canvas: true,\n      },\n    );\n  })\n);\n\n/**\n * loadImage\n *\n * @name loadImage\n * @function load image from different source\n * @access private\n */\nconst loadImage = async (image) => {\n  let data = image;\n  if (typeof image === 'undefined') {\n    return 'undefined';\n  }\n\n  if (typeof image === 'string') {\n    if (image.endsWith('.pbm')) {\n      const resp = await fetch(resolveURL(image));\n      data = await resp.arrayBuffer();\n    } else {\n      let img = image;\n      // If not Base64 Image\n      if (!/data:image\\/([a-zA-Z]*);base64,([^\"]*)/.test(image)) {\n        img = resolveURL(image);\n      }\n      data = await readFromBlobOrFile(\n        await fixOrientationFromUrlOrBlobOrFile(img),\n      );\n    }\n  } else if (image instanceof HTMLElement) {\n    if (image.tagName === 'IMG') {\n      data = await loadImage(image.src);\n    }\n    if (image.tagName === 'VIDEO') {\n      data = await loadImage(image.poster);\n    }\n    if (image.tagName === 'CANVAS') {\n      await new Promise((resolve) => {\n        image.toBlob(async (blob) => {\n          data = await readFromBlobOrFile(blob);\n          resolve();\n        });\n      });\n    }\n  } else if (image instanceof File || image instanceof Blob) {\n    let img = image;\n    if (!image.name.endsWith('.pbm')) {\n      img = await fixOrientationFromUrlOrBlobOrFile(img);\n    }\n    data = await readFromBlobOrFile(img);\n  }\n\n  return new Uint8Array(data);\n};\n\nmodule.exports = loadImage;\n"]},"metadata":{},"sourceType":"script"}