{"ast":null,"code":"var _objectSpread = require(\"/Users/rupeshchavan/Desktop/react-ocr/node_modules/@babel/runtime/helpers/objectSpread2\");\n\n/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\nmodule.exports = function (page) {\n  var blocks = [];\n  var paragraphs = [];\n  var lines = [];\n  var words = [];\n  var symbols = [];\n  page.blocks.forEach(function (block) {\n    block.paragraphs.forEach(function (paragraph) {\n      paragraph.lines.forEach(function (line) {\n        line.words.forEach(function (word) {\n          word.symbols.forEach(function (sym) {\n            symbols.push(_objectSpread(_objectSpread({}, sym), {}, {\n              page: page,\n              block: block,\n              paragraph: paragraph,\n              line: line,\n              word: word\n            }));\n          });\n          words.push(_objectSpread(_objectSpread({}, word), {}, {\n            page: page,\n            block: block,\n            paragraph: paragraph,\n            line: line\n          }));\n        });\n        lines.push(_objectSpread(_objectSpread({}, line), {}, {\n          page: page,\n          block: block,\n          paragraph: paragraph\n        }));\n      });\n      paragraphs.push(_objectSpread(_objectSpread({}, paragraph), {}, {\n        page: page,\n        block: block\n      }));\n    });\n    blocks.push(_objectSpread(_objectSpread({}, block), {}, {\n      page: page\n    }));\n  });\n  return _objectSpread(_objectSpread({}, page), {}, {\n    blocks: blocks,\n    paragraphs: paragraphs,\n    lines: lines,\n    words: words,\n    symbols: symbols\n  });\n};","map":{"version":3,"sources":["/Users/rupeshchavan/Desktop/react-ocr/node_modules/tesseract.js/src/utils/circularize.js"],"names":["module","exports","page","blocks","paragraphs","lines","words","symbols","forEach","block","paragraph","line","word","sym","push"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAA,MAAM,CAACC,OAAP,GAAiB,UAACC,IAAD,EAAU;AACzB,MAAMC,MAAM,GAAG,EAAf;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,MAAMC,OAAO,GAAG,EAAhB;AAEAL,EAAAA,IAAI,CAACC,MAAL,CAAYK,OAAZ,CAAoB,UAACC,KAAD,EAAW;AAC7BA,IAAAA,KAAK,CAACL,UAAN,CAAiBI,OAAjB,CAAyB,UAACE,SAAD,EAAe;AACtCA,MAAAA,SAAS,CAACL,KAAV,CAAgBG,OAAhB,CAAwB,UAACG,IAAD,EAAU;AAChCA,QAAAA,IAAI,CAACL,KAAL,CAAWE,OAAX,CAAmB,UAACI,IAAD,EAAU;AAC3BA,UAAAA,IAAI,CAACL,OAAL,CAAaC,OAAb,CAAqB,UAACK,GAAD,EAAS;AAC5BN,YAAAA,OAAO,CAACO,IAAR,iCACKD,GADL;AACUX,cAAAA,IAAI,EAAJA,IADV;AACgBO,cAAAA,KAAK,EAALA,KADhB;AACuBC,cAAAA,SAAS,EAATA,SADvB;AACkCC,cAAAA,IAAI,EAAJA,IADlC;AACwCC,cAAAA,IAAI,EAAJA;AADxC;AAGD,WAJD;AAKAN,UAAAA,KAAK,CAACQ,IAAN,iCACKF,IADL;AACWV,YAAAA,IAAI,EAAJA,IADX;AACiBO,YAAAA,KAAK,EAALA,KADjB;AACwBC,YAAAA,SAAS,EAATA,SADxB;AACmCC,YAAAA,IAAI,EAAJA;AADnC;AAGD,SATD;AAUAN,QAAAA,KAAK,CAACS,IAAN,iCACKH,IADL;AACWT,UAAAA,IAAI,EAAJA,IADX;AACiBO,UAAAA,KAAK,EAALA,KADjB;AACwBC,UAAAA,SAAS,EAATA;AADxB;AAGD,OAdD;AAeAN,MAAAA,UAAU,CAACU,IAAX,iCACKJ,SADL;AACgBR,QAAAA,IAAI,EAAJA,IADhB;AACsBO,QAAAA,KAAK,EAALA;AADtB;AAGD,KAnBD;AAoBAN,IAAAA,MAAM,CAACW,IAAP,iCACKL,KADL;AACYP,MAAAA,IAAI,EAAJA;AADZ;AAGD,GAxBD;AA0BA,yCACKA,IADL;AACWC,IAAAA,MAAM,EAANA,MADX;AACmBC,IAAAA,UAAU,EAAVA,UADnB;AAC+BC,IAAAA,KAAK,EAALA,KAD/B;AACsCC,IAAAA,KAAK,EAALA,KADtC;AAC6CC,IAAAA,OAAO,EAAPA;AAD7C;AAGD,CApCD","sourcesContent":["/**\n * In the recognition result of tesseract, there\n * is a deep JSON object for details, it has around\n *\n * The result of dump.js is a big JSON tree\n * which can be easily serialized (for instance\n * to be sent from a webworker to the main app\n * or through Node's IPC), but we want\n * a (circular) DOM-like interface for walking\n * through the data.\n *\n * @fileoverview DOM-like interface for walking through data\n * @author Kevin Kwok <antimatter15@gmail.com>\n * @author Guillermo Webster <gui@mit.edu>\n * @author Jerome Wu <jeromewus@gmail.com>\n */\n\nmodule.exports = (page) => {\n  const blocks = [];\n  const paragraphs = [];\n  const lines = [];\n  const words = [];\n  const symbols = [];\n\n  page.blocks.forEach((block) => {\n    block.paragraphs.forEach((paragraph) => {\n      paragraph.lines.forEach((line) => {\n        line.words.forEach((word) => {\n          word.symbols.forEach((sym) => {\n            symbols.push({\n              ...sym, page, block, paragraph, line, word,\n            });\n          });\n          words.push({\n            ...word, page, block, paragraph, line,\n          });\n        });\n        lines.push({\n          ...line, page, block, paragraph,\n        });\n      });\n      paragraphs.push({\n        ...paragraph, page, block,\n      });\n    });\n    blocks.push({\n      ...block, page,\n    });\n  });\n\n  return {\n    ...page, blocks, paragraphs, lines, words, symbols,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}