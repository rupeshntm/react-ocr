{"ast":null,"code":"var _regeneratorRuntime = require(\"/Users/rupeshchavan/Desktop/lendenclub-assign/react-ocr/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"/Users/rupeshchavan/Desktop/lendenclub-assign/react-ocr/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar _objectSpread = require(\"/Users/rupeshchavan/Desktop/lendenclub-assign/react-ocr/node_modules/@babel/runtime/helpers/objectSpread2\");\n\nvar _objectWithoutProperties = require(\"/Users/rupeshchavan/Desktop/lendenclub-assign/react-ocr/node_modules/@babel/runtime/helpers/objectWithoutProperties\");\n\nvar resolvePaths = require('./utils/resolvePaths');\n\nvar circularize = require('./utils/circularize');\n\nvar createJob = require('./createJob');\n\nvar _require = require('./utils/log'),\n    log = _require.log;\n\nvar getId = require('./utils/getId');\n\nvar _require2 = require('./constants/config'),\n    defaultOEM = _require2.defaultOEM;\n\nvar _require3 = require('./worker/node'),\n    defaultOptions = _require3.defaultOptions,\n    spawnWorker = _require3.spawnWorker,\n    terminateWorker = _require3.terminateWorker,\n    onMessage = _require3.onMessage,\n    loadImage = _require3.loadImage,\n    send = _require3.send;\n\nvar workerCounter = 0;\n\nmodule.exports = function () {\n  var _options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var id = getId('Worker', workerCounter);\n\n  var _resolvePaths = resolvePaths(_objectSpread(_objectSpread({}, defaultOptions), _options)),\n      logger = _resolvePaths.logger,\n      errorHandler = _resolvePaths.errorHandler,\n      options = _objectWithoutProperties(_resolvePaths, [\"logger\", \"errorHandler\"]);\n\n  var resolves = {};\n  var rejects = {};\n  var worker = spawnWorker(options);\n  workerCounter += 1;\n\n  var setResolve = function setResolve(action, res) {\n    resolves[action] = res;\n  };\n\n  var setReject = function setReject(action, rej) {\n    rejects[action] = rej;\n  };\n\n  var startJob = function startJob(_ref) {\n    var jobId = _ref.id,\n        action = _ref.action,\n        payload = _ref.payload;\n    return new Promise(function (resolve, reject) {\n      log(\"[\".concat(id, \"]: Start \").concat(jobId, \", action=\").concat(action));\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId: jobId,\n        action: action,\n        payload: payload\n      });\n    });\n  };\n\n  var load = function load(jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'load',\n      payload: {\n        options: options\n      }\n    }));\n  };\n\n  var writeText = function writeText(path, text, jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'writeFile',\n        args: [path, text]\n      }\n    }));\n  };\n\n  var readText = function readText(path, jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'readFile',\n        args: [path, {\n          encoding: 'utf8'\n        }]\n      }\n    }));\n  };\n\n  var removeFile = function removeFile(path, jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: 'unlink',\n        args: [path]\n      }\n    }));\n  };\n\n  var FS = function FS(method, args, jobId) {\n    return startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: {\n        method: method,\n        args: args\n      }\n    }));\n  };\n\n  var loadLanguage = function loadLanguage() {\n    var langs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'eng';\n    var jobId = arguments.length > 1 ? arguments[1] : undefined;\n    return startJob(createJob({\n      id: jobId,\n      action: 'loadLanguage',\n      payload: {\n        langs: langs,\n        options: options\n      }\n    }));\n  };\n\n  var initialize = function initialize() {\n    var langs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'eng';\n    var oem = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultOEM;\n    var jobId = arguments.length > 2 ? arguments[2] : undefined;\n    return startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: {\n        langs: langs,\n        oem: oem\n      }\n    }));\n  };\n\n  var setParameters = function setParameters() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var jobId = arguments.length > 1 ? arguments[1] : undefined;\n    return startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: {\n        params: params\n      }\n    }));\n  };\n\n  var recognize = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(image) {\n      var opts,\n          jobId,\n          _args = arguments;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              opts = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              jobId = _args.length > 2 ? _args[2] : undefined;\n              _context.t0 = startJob;\n              _context.t1 = createJob;\n              _context.t2 = jobId;\n              _context.next = 7;\n              return loadImage(image);\n\n            case 7:\n              _context.t3 = _context.sent;\n              _context.t4 = opts;\n              _context.t5 = {\n                image: _context.t3,\n                options: _context.t4\n              };\n              _context.t6 = {\n                id: _context.t2,\n                action: 'recognize',\n                payload: _context.t5\n              };\n              _context.t7 = (0, _context.t1)(_context.t6);\n              return _context.abrupt(\"return\", (0, _context.t0)(_context.t7));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function recognize(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var getPDF = function getPDF() {\n    var title = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Tesseract OCR Result';\n    var textonly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var jobId = arguments.length > 2 ? arguments[2] : undefined;\n    return startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: {\n        title: title,\n        textonly: textonly\n      }\n    }));\n  };\n\n  var detect = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(image, jobId) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.t0 = startJob;\n              _context2.t1 = createJob;\n              _context2.t2 = jobId;\n              _context2.next = 5;\n              return loadImage(image);\n\n            case 5:\n              _context2.t3 = _context2.sent;\n              _context2.t4 = {\n                image: _context2.t3\n              };\n              _context2.t5 = {\n                id: _context2.t2,\n                action: 'detect',\n                payload: _context2.t4\n              };\n              _context2.t6 = (0, _context2.t1)(_context2.t5);\n              return _context2.abrupt(\"return\", (0, _context2.t0)(_context2.t6));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function detect(_x2, _x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  var terminate = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (worker !== null) {\n                /*\n                await startJob(createJob({\n                  id: jobId,\n                  action: 'terminate',\n                }));\n                */\n                terminateWorker(worker);\n                worker = null;\n              }\n\n              return _context3.abrupt(\"return\", Promise.resolve());\n\n            case 2:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function terminate() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  onMessage(worker, function (_ref5) {\n    var workerId = _ref5.workerId,\n        jobId = _ref5.jobId,\n        status = _ref5.status,\n        action = _ref5.action,\n        data = _ref5.data;\n\n    if (status === 'resolve') {\n      log(\"[\".concat(workerId, \"]: Complete \").concat(jobId));\n      var d = data;\n\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from(_objectSpread(_objectSpread({}, data), {}, {\n          length: Object.keys(data).length\n        }));\n      }\n\n      resolves[action]({\n        jobId: jobId,\n        data: d\n      });\n    } else if (status === 'reject') {\n      rejects[action](data);\n\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger(data);\n    }\n  });\n  return {\n    id: id,\n    worker: worker,\n    setResolve: setResolve,\n    setReject: setReject,\n    load: load,\n    writeText: writeText,\n    readText: readText,\n    removeFile: removeFile,\n    FS: FS,\n    loadLanguage: loadLanguage,\n    initialize: initialize,\n    setParameters: setParameters,\n    recognize: recognize,\n    getPDF: getPDF,\n    detect: detect,\n    terminate: terminate\n  };\n};","map":{"version":3,"sources":["/Users/rupeshchavan/Desktop/lendenclub-assign/react-ocr/node_modules/tesseract.js/src/createWorker.js"],"names":["resolvePaths","require","circularize","createJob","log","getId","defaultOEM","defaultOptions","spawnWorker","terminateWorker","onMessage","loadImage","send","workerCounter","module","exports","_options","id","logger","errorHandler","options","resolves","rejects","worker","setResolve","action","res","setReject","rej","startJob","jobId","payload","Promise","resolve","reject","workerId","load","writeText","path","text","method","args","readText","encoding","removeFile","FS","loadLanguage","langs","initialize","oem","setParameters","params","recognize","image","opts","getPDF","title","textonly","detect","terminate","status","data","d","Array","from","length","Object","keys","Error"],"mappings":"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","sourcesContent":["const resolvePaths = require('./utils/resolvePaths');\nconst circularize = require('./utils/circularize');\nconst createJob = require('./createJob');\nconst { log } = require('./utils/log');\nconst getId = require('./utils/getId');\nconst { defaultOEM } = require('./constants/config');\nconst {\n  defaultOptions,\n  spawnWorker,\n  terminateWorker,\n  onMessage,\n  loadImage,\n  send,\n} = require('./worker/node');\n\nlet workerCounter = 0;\n\nmodule.exports = (_options = {}) => {\n  const id = getId('Worker', workerCounter);\n  const {\n    logger,\n    errorHandler,\n    ...options\n  } = resolvePaths({\n    ...defaultOptions,\n    ..._options,\n  });\n  const resolves = {};\n  const rejects = {};\n  let worker = spawnWorker(options);\n\n  workerCounter += 1;\n\n  const setResolve = (action, res) => {\n    resolves[action] = res;\n  };\n\n  const setReject = (action, rej) => {\n    rejects[action] = rej;\n  };\n\n  const startJob = ({ id: jobId, action, payload }) => (\n    new Promise((resolve, reject) => {\n      log(`[${id}]: Start ${jobId}, action=${action}`);\n      setResolve(action, resolve);\n      setReject(action, reject);\n      send(worker, {\n        workerId: id,\n        jobId,\n        action,\n        payload,\n      });\n    })\n  );\n\n  const load = (jobId) => (\n    startJob(createJob({\n      id: jobId, action: 'load', payload: { options },\n    }))\n  );\n\n  const writeText = (path, text, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'writeFile', args: [path, text] },\n    }))\n  );\n\n  const readText = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'readFile', args: [path, { encoding: 'utf8' }] },\n    }))\n  );\n\n  const removeFile = (path, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method: 'unlink', args: [path] },\n    }))\n  );\n\n  const FS = (method, args, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'FS',\n      payload: { method, args },\n    }))\n  );\n\n  const loadLanguage = (langs = 'eng', jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'loadLanguage',\n      payload: { langs, options },\n    }))\n  );\n\n  const initialize = (langs = 'eng', oem = defaultOEM, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'initialize',\n      payload: { langs, oem },\n    }))\n  );\n\n  const setParameters = (params = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'setParameters',\n      payload: { params },\n    }))\n  );\n\n  const recognize = async (image, opts = {}, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'recognize',\n      payload: { image: await loadImage(image), options: opts },\n    }))\n  );\n\n  const getPDF = (title = 'Tesseract OCR Result', textonly = false, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'getPDF',\n      payload: { title, textonly },\n    }))\n  );\n\n  const detect = async (image, jobId) => (\n    startJob(createJob({\n      id: jobId,\n      action: 'detect',\n      payload: { image: await loadImage(image) },\n    }))\n  );\n\n  const terminate = async () => {\n    if (worker !== null) {\n      /*\n      await startJob(createJob({\n        id: jobId,\n        action: 'terminate',\n      }));\n      */\n      terminateWorker(worker);\n      worker = null;\n    }\n    return Promise.resolve();\n  };\n\n  onMessage(worker, ({\n    workerId, jobId, status, action, data,\n  }) => {\n    if (status === 'resolve') {\n      log(`[${workerId}]: Complete ${jobId}`);\n      let d = data;\n      if (action === 'recognize') {\n        d = circularize(data);\n      } else if (action === 'getPDF') {\n        d = Array.from({ ...data, length: Object.keys(data).length });\n      }\n      resolves[action]({ jobId, data: d });\n    } else if (status === 'reject') {\n      rejects[action](data);\n      if (errorHandler) {\n        errorHandler(data);\n      } else {\n        throw Error(data);\n      }\n    } else if (status === 'progress') {\n      logger(data);\n    }\n  });\n\n  return {\n    id,\n    worker,\n    setResolve,\n    setReject,\n    load,\n    writeText,\n    readText,\n    removeFile,\n    FS,\n    loadLanguage,\n    initialize,\n    setParameters,\n    recognize,\n    getPDF,\n    detect,\n    terminate,\n  };\n};\n"]},"metadata":{},"sourceType":"script"}