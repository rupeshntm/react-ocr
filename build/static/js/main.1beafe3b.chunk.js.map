{"version":3,"sources":["components/TextWrapper.js","components/ImageWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["TextWrapper","text","className","ImageWrapper","uploadFile","loading","type","name","onChange","e","App","useState","setLoading","imageUrl","setImageUrl","setText","convertImageToText","a","Tesseract","recognize","result","data","formData","FormData","append","target","files","config","headers","axios","post","res","url","console","log","message","useEffect","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAMeA,EAJK,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACrB,OAAO,0BAAUC,UAAU,eAApB,SAAoCD,KCkB9BE,EAnBM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,WAAYC,EAAc,EAAdA,QAClC,OACE,qBAAKH,UAAU,gBAAf,SACGG,EACC,2DAEA,+BACE,uBACEC,KAAK,OACLJ,UAAU,oBACVK,KAAK,QACLC,SAAU,SAACC,GAAD,OAAOL,EAAWK,W,iBCmDzBC,MAvDf,WAAgB,IAAD,EACiBC,oBAAS,GAD1B,mBACNN,EADM,KACGO,EADH,OAEmBD,mBAAS,MAF5B,mBAENE,EAFM,KAEIC,EAFJ,OAGWH,mBAAS,MAHpB,mBAGNV,EAHM,KAGAc,EAHA,KAKPC,EAAkB,uCAAG,4BAAAC,EAAA,6DACzBL,GAAW,GADc,SAEJM,IAAUC,UAAUN,EAAU,OAF1B,OAEnBO,EAFmB,OAGzBL,EAAQK,EAAOC,KAAKpB,MACpBW,GAAW,GAJc,2CAAH,qDAOlBR,EAAU,uCAAG,WAAOK,GAAP,mBAAAQ,EAAA,sEAEfL,GAAW,IACLU,EAAW,IAAIC,UACZC,OAAO,QAASf,EAAEgB,OAAOC,MAAM,IAClCC,EAAS,CACbC,QAAS,CACP,eAAgB,wBAPL,SAWGC,IAAMC,KAAN,6CAzBR,oCA2BRR,EACAK,GAda,OAWTI,EAXS,OAgBfjB,EAAYiB,EAAIV,KAAKA,KAAKW,KAC1BpB,GAAW,GAjBI,kDAmBfqB,QAAQC,IAAI,KAAMC,SAnBH,0DAAH,sDA6BhB,OANAC,qBAAU,WACQ,MAAZvB,GACFG,MAED,CAACH,IAGF,qBAAKX,UAAU,MAAf,SACE,sBAAKA,UAAU,YAAf,UACGG,GAAW,qBAAKH,UAAU,WAClB,MAARD,EACC,cAAC,EAAD,CAAcI,QAASA,EAASD,WAAYA,IAE5C,cAAC,EAAD,CAAaH,KAAMA,UC7CdoC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1beafe3b.chunk.js","sourcesContent":["import React from \"react\";\n\nconst TextWrapper = ({ text }) => {\n  return <textarea className=\"text-wrapper\">{text}</textarea>;\n};\n\nexport default TextWrapper;\n","import React from \"react\";\n\nconst ImageWrapper = ({ uploadFile, loading }) => {\n  return (\n    <div className=\"image-wrapper\">\n      {loading ? (\n        <h2>Processing... please wait</h2>\n      ) : (\n        <form>\n          <input\n            type=\"file\"\n            className=\"custom-file-input\"\n            name=\"image\"\n            onChange={(e) => uploadFile(e)}\n          />\n        </form>\n      )}\n    </div>\n  );\n};\n\nexport default ImageWrapper;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Tesseract from \"tesseract.js\";\nimport TextWrapper from \"./components/TextWrapper\";\nimport ImageWrapper from \"./components/ImageWrapper\";\nimport axios from \"axios\";\n\nconst API_KEY = \"72cdbedbf6cb03092ae7621172225b68\";\n\nfunction App() {\n  const [loading, setLoading] = useState(false);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [text, setText] = useState(null);\n\n  const convertImageToText = async () => {\n    setLoading(true);\n    const result = await Tesseract.recognize(imageUrl, \"eng\");\n    setText(result.data.text);\n    setLoading(false);\n  };\n\n  const uploadFile = async (e) => {\n    try {\n      setLoading(true);\n      const formData = new FormData();\n      formData.append(\"image\", e.target.files[0]);\n      const config = {\n        headers: {\n          \"content-type\": \"multipart/form-data\",\n        },\n      };\n\n      const res = await axios.post(\n        `https://api.imgbb.com/1/upload?key=${API_KEY}`,\n        formData,\n        config\n      );\n      setImageUrl(res.data.data.url);\n      setLoading(false);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  useEffect(() => {\n    if (imageUrl != null) {\n      convertImageToText();\n    }\n  }, [imageUrl]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        {loading && <div className=\"loader\"></div>}\n        {text == null ? (\n          <ImageWrapper loading={loading} uploadFile={uploadFile} />\n        ) : (\n          <TextWrapper text={text} />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}